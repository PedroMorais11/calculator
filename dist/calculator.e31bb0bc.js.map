{"version":3,"sources":["index.js"],"names":["CLEAR_CONSOLE","DELETE_CHAR","ADD","SUBTRACT","MULTIPLY","DIVIDE","operation","consoleValue","valuesToOperate","sum","total","num","min","mult","div","add","storeValue","clearConsole","multiply","subtract","divide","equals","result","map","parseInt","reduce","toString","loadToConsole","resetValuesToOperate","deleteChar","length","slice","loadNumber","value","document","querySelector","innerText","push","resolveClickAction","querySelectorAll","forEach","element","addEventListener","event","target"],"mappings":"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","file":"calculator.e31bb0bc.js","sourceRoot":"..","sourcesContent":["const CLEAR_CONSOLE = 'C';\nconst DELETE_CHAR = 'DEL';\n\nconst ADD = 'add';\nconst SUBTRACT = 'subtract';\nconst MULTIPLY = 'multiply';\nconst DIVIDE = 'divide';\n\nlet operation = '';\nlet consoleValue = '0';\nlet valuesToOperate = [];\n\nconst sum = (total, num) => total + num;\n\nconst min = (total, num) => total - num;\n\nconst mult = (total, num) => total * num;\n\nconst div = (total, num) => total / num;\n\nfunction add() {\n    storeValue();\n    operation = ADD;\n    clearConsole();\n}\n\nfunction multiply() {\n    storeValue();\n    operation = MULTIPLY;\n    clearConsole();\n}\n\nfunction subtract() {\n    storeValue();\n    operation = SUBTRACT;\n    clearConsole();\n}\n\nfunction divide() {\n    storeValue();\n    operation = DIVIDE;\n    clearConsole();\n}\n\nfunction equals() {\n    storeValue();\n    let result = 0;\n    switch (operation) {\n        case ADD:\n            valuesToOperate = valuesToOperate.map(num => parseInt(num));\n            result = valuesToOperate.reduce(sum);\n            consoleValue = result.toString();\n            loadToConsole();\n            resetValuesToOperate();\n            break;\n        case SUBTRACT:\n            valuesToOperate = valuesToOperate.map(num => parseInt(num));\n            result = valuesToOperate.reduce(min);\n            consoleValue = result.toString();\n            loadToConsole();\n            resetValuesToOperate();\n            break;\n        case MULTIPLY:\n            valuesToOperate = valuesToOperate.map(num => parseInt(num));\n            result = valuesToOperate.reduce(mult);\n            consoleValue = result.toString();\n            loadToConsole();\n            resetValuesToOperate();\n            break;\n        case DIVIDE:\n            valuesToOperate = valuesToOperate.map(num => parseInt(num));\n            result = valuesToOperate.reduce(div);\n            consoleValue = result.toString();\n            loadToConsole();\n            resetValuesToOperate();\n            break;\n    }\n}\n\nfunction clearConsole() {\n    consoleValue = '0';\n    loadToConsole();\n}\n\nfunction deleteChar() {\n    consoleValue.length === 1 ?\n        consoleValue = '0' : consoleValue = consoleValue.slice(0, -1);\n    loadToConsole();\n}\n\nfunction loadNumber(value) {\n    consoleValue === '0' ? \n        consoleValue = value : consoleValue += value;\n    loadToConsole();\n}\n\nfunction loadToConsole() {\n    document.querySelector('.console').innerText = consoleValue;\n}\n\nfunction storeValue() {\n    valuesToOperate.push(consoleValue);\n}\n\nfunction resetValuesToOperate() {\n    valuesToOperate = [];\n}\n\nfunction resolveClickAction(value) {\n    value = value.toString();\n    switch (value) {\n        case CLEAR_CONSOLE:\n            clearConsole();\n            break;\n        case DELETE_CHAR:\n            deleteChar();\n            break;\n        default:\n            loadNumber(value);\n            break;\n    }\n}\n\ndocument.querySelectorAll('.no-operator').forEach(element => {\n    element.addEventListener('click', function(event) {\n        resolveClickAction(event.target.innerText);\n    });\n}); \n\nloadToConsole();"]}